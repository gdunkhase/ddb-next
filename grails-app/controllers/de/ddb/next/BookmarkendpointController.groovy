/*
 * Copyright (C) 2013 FIZ Karlsruhe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.ddb.next

import grails.converters.JSON

/**
 * Class that might serve as an endpoint for the Bookmark service
 * @author arb
 *
 */
class BookmarkendpointController {
    
    /**
     * List user's bookmark folders
     * Will be invoked only on GET 
     * See URLRouting
     * GET /users/{id}/bookmarks
     * 
     * @return JSONObject
     */
    
    def listfolders(){
        def status = 200
        //Retrieve list and put it on message
        def message = "the list of the bookmarks"

        //If not found
        def notfound = false
        if (notfound){
            status = 404
            message="Not found"
        }
        
        //render(text = 'some text', contentType: "application/vnd.api+json", encoding: "UTF-8")
//        render(contentType: "application/vnd.api+json", status: status) {
//            bookmarks = message
//        }
        render(contentType: "application/vnd.api+json", text: [message: 'some text', foo: 'bar'])
    }
    /**
     * Create a new bookmark folder
     * Will be invoked only on POST
     * The newly created resource will be referenced by the URI(s) returned in the entity of the response
     * See URL Routing
     * POST /users/{id}/bookmarks 
     * 
     * @param JSONObject
     * @return
     */
    def newfolder(){
        def status = 201
        render(contentType: "text/json", status: status) {
            Location = '/users/{id}/bookmarks/AUTOGENERATEDID'
        }
    }
    
    /**
     * List items's within a specific bookmark folder
     * Will be invoked only on GET 
     * See URLRouting
     * GET /users/{id}/bookmarks/{fid}?start&count
     * 
     * @return JSONObject
     */
    def listitemsinfolder(){
        def status = 200
        //Retrieve list and put it on message
        def message = "the list of the items in that folder"

        //If not found
        def notfound = false
        if (!notfound){
            status = 404
            message="Not found"
        }
        
        //render(text = 'some text', contentType: "application/vnd.api+json", encoding: "UTF-8")
        render(contentType: "text/json", status: status) {
            bookmarks = message
        }
    }
    /**
     * Create items's within a specific bookmark folder
     * Will be invoked only on PUT
     * See URLRouting
     * PUT /users/{id}/bookmarks/{fid}
     *
     * @return JSONObject
     */
    def newitemsinfolder(){
        def status = 200
        render(contentType: "text/json", status: status) {
            Location = '/users/{id}/bookmarks/fid'
        }
    }
    
    /**
     * Partially update a bookmark folder
     * Will be invoked only on PATCH
     * See URLRouting
     * PATCH /users/{id}/bookmarks/{fid}
     *
     * @return JSONObject
     */
    def updatefolder(){
        def status = 200
        render(contentType: "text/json", status: status) {
            Location = '/users/{id}/bookmarks/AUTOGENERATEDID'
        }
    }
    
    /**
     * Remove a bookmark folder
     * Will be invoked only on DELETE
     * See URLRouting
     * DELETE /users/{id}/bookmarks/{fid}
     *
     * @return JSONObject
     */
    def removefolder(){
        def status = 204
        render(contentType: "text/json", status: status) {
            message = 'deleted succ'
        }
        
    }
    /**
     * Add one cultural item id to a bookmark folder
     * Will be invoked only on POST
     * See URLRouting
     * POST /users/{id}/bookmarks/{fid}/items
     *
     * @return JSONObject
     */
    def additeminfolder(){
        def status = 200
        render(contentType: "text/json", status: status) {
            message = 'added succ'
        }
    }
    /**
     * Delete one cultural item id to a bookmark folder
     * Will be invoked only on DELETE
     * See URLRouting
     * DELETE /users/{id}/bookmarks/{fid}/items/{iid}
     *
     * @return JSONObject
     */
    def removeiteminfolder(){
        def status = 204
        render(contentType: "text/json", status: status) {
            message = 'deleted succ'
        }
    }
}
